---
import { cn } from "@/lib/utils";
import JourneyItem from "./JourneyItem.astro";
import Circle from "./JourneyTimelineCircle.astro";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
const periodsCollection = await getCollection("journeyPeriods");

type TPeriodEntry = CollectionEntry<'journeyPeriods'>

type AccumReduce = [TPeriodEntry, TPeriodEntry?][];

function groupPeriods(periodsCollection: TPeriodEntry[]): AccumReduce {
    let periodEntryGroupArray: AccumReduce = [];

    for (let i = 0; i < periodsCollection.length; i += 2) {
        if (i + 1 < periodsCollection.length) {
            periodEntryGroupArray.push([periodsCollection[i], periodsCollection[i + 1]]);
        } else {
            periodEntryGroupArray.push([periodsCollection[i]]);
        }
    }

    return periodEntryGroupArray;
}
const periodsGroup = groupPeriods(periodsCollection)
---

<div class="relative">
  {
    periodsGroup.map((current, i) => {
      const [period1, period2] = current
      return(
      <div
        class={cn(
          "grid grid-rows-[repeat(3,_minmax(200px,_auto))] md:grid-rows-[repeat(2,_minmax(200px,_auto))] gap-y-8 sm:gap-y-0 md:grid-cols-timelineLayout sm:max-md:px-16",
          { "grid-rows-[repeat(4,_minmax(200px,_auto))]": i === 0 },
        )}
      >
        <Circle class={cn("md:col-start-2", { "max-md:hidden": i !== 0 })} />
        <JourneyItem
          journeyPeriod={period1}
          class="md:col-start-3"
          bannerRight={i % 2 === 0}
        />
        {period2 && (
          <JourneyItem
            journeyPeriod={period2}
            class="md:row-start-2 mt-2 md:mt-0"
            bannerRight={i % 2 === 0}
          />
          <Circle class="md:row-start-2" />
        )}
      </div>
    )})
  }
  <div
    id="line"
    class="absolute w-px bg-border top-0 bottom-0 right-1/2 -z-10"
    aria-hidden="true"
  ></div>
</div>
